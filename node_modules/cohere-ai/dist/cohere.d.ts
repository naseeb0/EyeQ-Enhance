import * as models from './models';
interface CohereService {
    init(key: string, version?: string): void;
    generate(model: string, config: models.generate): Promise<models.cohereResponse<models.text>>;
    embed(model: string, config: models.embed): Promise<models.cohereResponse<models.embeddings>>;
    chooseBest(model: string, config: models.chooseBest): Promise<models.cohereResponse<models.scores>>;
    extract(model: string, config: models.extract): Promise<models.cohereResponse<models.extraction[]>>;
}
declare class Cohere implements CohereService {
    init(key: string, version?: string): void;
    private makeRequest;
    /** Generates realistic text conditioned on a given input.
     * See: https://docs.cohere.ai/generate-reference
     */
    generate(model: string, config: models.generate): Promise<models.cohereResponse<models.text>>;
    /** Returns text embeddings. An embedding is a list of floating point numbers that captures semantic
     * information about the text that it represents.
     * See: https://docs.cohere.ai/embed-reference
     */
    embed(model: string, config: models.embed): Promise<models.cohereResponse<models.embeddings>>;
    /**  Uses likelihood to perform classification. Given a query text that you'd like to classify between
     * a number of options, Choose Best will return a score between the query and each option.
     * See: https://docs.cohere.ai/choose-best-reference
     */
    /**
     * @deprecated Will be deleted in favor of 'classify'.
     */
    chooseBest(model: string, config: models.chooseBest): Promise<models.cohereResponse<models.scores>>;
    /**
     * Classifies text as one of the given labels. Returns a confidence score for each label.
     */
    classify(model: string, config: models.classify): Promise<models.cohereResponse<models.classifications>>;
    /**
     * Extract text from texts, with examples
     */
    extract(model: string, config: models.extract): Promise<models.cohereResponse<models.extraction[]>>;
}
declare const cohere: Cohere;
export = cohere;
